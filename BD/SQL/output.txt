annualSeat.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createAnnualSeat

CREATE PROCEDURE football.sp_createAnnualSeat
  @bi				INT,  
  @start_date		DATE, 
  @n_seat			INT, 
  @row  			VARCHAR(1), 
  @value			INT,
  @id_section       INT,
  @season	        INT,
  @duration			INT

WITH ENCRYPTION
AS 
	IF @bi is null OR @start_date is null OR @n_seat is null OR @row is null OR @value is null OR 
		@id_section is null OR @season is null OR @duration is null
	BEGIN
		PRINT 'The bi, start_date, n_seat, row, value, id_section, season and duration can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI exists
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count = 0
	BEGIN
		RAISERROR ('The BI that you provided do not exists!', 14, 1)
		RETURN
	END

	-- check if the Annual seat is already in use
	SELECT @count = count(bi) FROM football.annual_seat WHERE n_seat = @n_seat AND row = @row AND bi = @bi AND id_section = @id_section AND season = @season;

	IF @count != 0
	BEGIN
		RAISERROR ('The Annual seat is already in use!', 14, 1)
		RETURN
	END

	-- check if the Annual seat is already in use
	SELECT @count = count(n_seat) FROM football.annual_seat WHERE n_seat = @n_seat AND row = @row AND id_section = @id_section AND season = @season;

	IF @count != 0
	BEGIN
		RAISERROR ('The Annual seat is already in use!', 14, 1)
		RETURN
	END


	-- check if the seat exists
	SELECT @count = count(n_seat) FROM football.seat WHERE n_seat = @n_seat AND row = @row AND id_section = @id_section;

	IF @count = 0
	BEGIN
		RAISERROR ('The seat doesnt exist!', 14, 1)
		RETURN
	END

	BEGIN TRY
		INSERT INTO football.annual_seat 
					([n_seat], 
					 [row], 
					 [id_section], 
					 [start_date], 
					 [duration], 
					 [value],
					 [bi],
					 [season]) 
		VALUES      ( @n_seat, 
					  @row, 
					  @id_section, 
					  @start_date, 
					  @duration, 
					  @value,
					  @bi,
					  @season)
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the annual seat!', 14, 1)
	END CATCH;


go 

-- DROP PROC football.sp_modifyAnnualSeat

CREATE PROCEDURE football.sp_modifyAnnualSeat
  @bi				INT,  
  @start_date		DATE, 
  @n_seat			INT, 
  @row  			VARCHAR(1), 
  @value			INT,
  @id_section       INT,
  @season	        INT,
  @duration			INT

WITH ENCRYPTION
AS 
	IF @bi is null OR @start_date is null OR @n_seat is null OR @row is null OR @value is null OR 
		@id_section is null OR @season is null OR @duration is null
	BEGIN
		PRINT 'The bi, start_date, n_seat, row, value, id_section, season and duration can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI exists
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count = 0
	BEGIN
		RAISERROR ('The BI that you provided do not exists!', 14, 1)
		RETURN
	END

	-- check if the seat exists
	SELECT @count = count(n_seat) FROM football.seat WHERE n_seat = @n_seat AND row = @row AND id_section = @id_section;

	IF @count = 0
	BEGIN
		RAISERROR ('The seat doesnt exist!', 14, 1)
		RETURN
	END

	BEGIN TRY
		UPDATE  football.annual_seat SET
				start_date = @start_date,
				id_section = @id_section,
				duration = @duration,
				value = @value
		WHERE n_seat = @n_seat AND row = @row AND id_section = @id_section AND bi = @bi AND season = @season;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the annual seat!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_deleteAnnualSeat

CREATE PROCEDURE football.sp_deleteAnnualSeat
  @n_seat				INT,
  @row					VARCHAR(1),
  @id_section			INT,
  @bi					INT,
  @season				INT
WITH ENCRYPTION
AS 
	IF @bi is null OR @n_seat is null OR @id_section is null OR @row is null OR @season is null
	BEGIN
		PRINT 'The bi, n_seat, id_section, row and season can not be null!'
		RETURN
	END

	BEGIN TRY
		DELETE FROM football.annual_seat WHERE bi = @bi AND n_seat = @n_seat AND id_section = @id_section AND row = @row AND season = @season;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the annual seat!', 14, 1)
	END CATCH;
\end{lstlisting}

coachs.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createCoach

CREATE PROCEDURE football.sp_createCoach
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @nif				INT, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @salary			MONEY,
  @federation_id	INT,
  @role				VARCHAR(50)
WITH ENCRYPTION
AS 
	IF  @bi is null OR @name is null OR @address is null OR @birth_date is null OR @nif is null OR 
		@gender is null OR @nationality is null OR @salary is null OR @federation_id is null OR
		@role is null
	BEGIN
		PRINT 'The bi, name, address, birth_date, nif, nationality, salary, federation_id and role can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI is already in use
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count != 0
	BEGIN
		RAISERROR ('The BI id is already in use!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use
	SELECT @count = count(federation_id) FROM football.coach WHERE federation_id = @federation_id;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use
	SELECT @count = count(federation_id) FROM football.player WHERE federation_id = @federation_id;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use by one player!', 14, 1)
		RETURN
	END

	-- check if the NIF is already in use
	SELECT @count = count(nif) FROM football.person WHERE nif = @nif;

	IF @count != 0
	BEGIN
		RAISERROR ('The NIF id is already in use!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO football.person 
					([bi], 
					 [name], 
					 [address], 
					 [birth_date], 
					 [nif], 
					 [gender],
					 [nationality]) 
		VALUES      ( @bi, 
					  @name, 
					  @address, 
					  @birth_date, 
					  @nif, 
					  @gender,
					  @nationality) 

		INSERT INTO football.internal_people 
					([bi], 
					 [salary]) 
		VALUES      ( @bi, 
					  @salary) 

		INSERT INTO football.coach 
					([bi], 
					 [federation_id], 
					 [role]) 
		VALUES      ( @bi, 
					  @federation_id, 
					  @role)
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the coach!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

go 

-- DROP PROC football.sp_deleteCoach

CREATE PROCEDURE football.sp_deleteCoach
  @bi				INT
WITH ENCRYPTION
AS 
	IF @bi is null
	BEGIN
		PRINT 'The bi can not be null!'
		RETURN
	END
	
	BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM football.heads WHERE bi = @bi;
		DELETE FROM football.coach WHERE bi = @bi;
		DELETE FROM football.internal_people WHERE bi = @bi;
		DELETE FROM football.person WHERE bi = @bi;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the coach!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;


go 

-- DROP PROC football.sp_modifyCoach

CREATE PROCEDURE football.sp_modifyCoach
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @salary			MONEY,
  @federation_id	INT,
  @role				VARCHAR(50)
WITH ENCRYPTION
AS 
	IF @bi is null OR @name is null OR @address is null OR @birth_date is null OR @gender is null
		OR @nationality is null OR @salary is null OR @federation_id is null OR @role is null
	BEGIN
		PRINT 'The bi, name, address, birth_date, nationality, salary, federation_id and role can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI exists
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count = 0
	BEGIN
		RAISERROR ('The BI that you provided do not exists!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use
	SELECT @count = count(federation_id) FROM football.coach WHERE federation_id = @federation_id AND bi != @bi;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use player
	SELECT @count = count(federation_id) FROM football.player WHERE federation_id = @federation_id AND bi != @bi;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use by one player!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE  football.person SET
				name = @name, 
				address = @address, 
				birth_date = @birth_date,
				gender = @gender,
				nationality = @nationality
		WHERE bi = @bi;

		UPDATE football.internal_people SET
			   salary = @salary
		WHERE bi = @bi;

		UPDATE football.coach SET
			   federation_id = @federation_id, 
			   role = @role
		WHERE bi = @bi;

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the coach!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

-- Coach teams
go
-- DROP TYPE football.CoachTeams;
CREATE TYPE football.CoachTeams
AS TABLE
(
  team_name NVARCHAR(200),
  bi		INT
);

go

-- DROP PROC football.sp_sync_coachTeams

CREATE PROCEDURE football.sp_sync_coachTeams
  @coachTeams as football.CoachTeams READONLY,
  @bi INT
WITH ENCRYPTION
AS 
BEGIN
	BEGIN TRANSACTION;

	BEGIN TRY
		-- clean coach teams
		DELETE FROM football.heads WHERE bi = @bi;

		-- insert into coach teams
		INSERT football.heads(team_name, bi)
		SELECT team_name, bi
		FROM @coachTeams
		
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the coach teams!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;
END
\end{lstlisting}

courts.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createCourt

CREATE PROCEDURE football.sp_createCourt
  @address			VARCHAR(150)
WITH ENCRYPTION
AS 
	IF @address is null
	BEGIN
		PRINT 'The address can not be null!'
		RETURN
	END
	
	BEGIN TRY
		INSERT INTO football.court 
					([address]) 
		VALUES      ( @address) 
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the court!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_modifyCourt

CREATE PROCEDURE football.sp_modifyCourt
  @id_court		INT,
  @address		VARCHAR(50)
WITH ENCRYPTION
AS 
	IF @id_court is null OR @address is null
	BEGIN
		PRINT 'The court id and address can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the court exists
	SELECT @count = count(id_court) FROM football.court WHERE id_court = @id_court;

	IF @count = 0
	BEGIN
		RAISERROR ('The court that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		UPDATE  football.court SET
				address = @address
		WHERE id_court = @id_court;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the court!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_deleteCourt

CREATE PROCEDURE football.sp_deleteCourt
  @id_court			INT
WITH ENCRYPTION
AS 
	IF @id_court is null
	BEGIN
		PRINT 'The court id can not be null!'
		RETURN
	END
	
	DECLARE @count int;

	-- check if the court exists in practices
	SELECT @count = count(id_court) FROM football.practice WHERE id_court = @id_court;

	IF @count != 0
	BEGIN
		RAISERROR ('Please delete the practices in this court first!', 14, 1)
		RETURN
	END

	BEGIN TRY
		DELETE FROM football.court WHERE id_court = @id_court;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the court!', 14, 1)
	END CATCH;
\end{lstlisting}

departments.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createDepartment

CREATE PROCEDURE football.sp_createDepartment
  @name				VARCHAR(75),
  @address		    VARCHAR(75)
WITH ENCRYPTION
AS 
	IF @name is null OR @address is null
	BEGIN
		PRINT 'The name and address can not be null!'
		RETURN
	END

	BEGIN TRY
		INSERT INTO football.department 
					([name], 
					 [address]) 
		VALUES      ( @name, 
					  @address)
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the department!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_modifyDepartment

CREATE PROCEDURE football.sp_modifyDepartment
  @name				VARCHAR(75),
  @department_id    INT,
  @address			VARCHAR(75)
WITH ENCRYPTION
AS 
	IF @name is null OR @department_id is null OR @address is null
	BEGIN
		PRINT 'The name, department_id and address can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the department exists
	SELECT @count = count(department_id) FROM football.department WHERE department_id = @department_id;

	IF @count = 0
	BEGIN
		RAISERROR ('The department that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		UPDATE  football.department SET
				name = @name,
				address = @address
		WHERE department_id = @department_id;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the department!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_deleteDepartment

CREATE PROCEDURE football.sp_deleteDepartment
  @department_id			INT
WITH ENCRYPTION
AS 
	IF @department_id is null
	BEGIN
		PRINT 'The department_id can not be null!'
		RETURN
	END

	DECLARE @count int

	-- check if the department has staff
	SELECT @count = count(department_id) FROM football.staff WHERE department_id = @department_id;

	IF @count != 0
	BEGIN
		RAISERROR ('The department that you provided has staff!', 14, 1)
		RETURN
	END
	
	BEGIN TRY
		DELETE FROM football.department WHERE department_id = @department_id;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the department!', 14, 1)
	END CATCH;
\end{lstlisting}

members.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createMember

CREATE PROCEDURE football.sp_createMember
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @nif				INT, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @shares_value		MONEY,
  @shares_in_day	INT
 
WITH ENCRYPTION
AS 
	IF @bi is null OR @name is null OR @address is null OR @birth_date is null OR @nif is null OR 
		@gender is null OR @nationality is null OR @shares_value is null OR
		@shares_in_day is null
	BEGIN
		PRINT 'The bi, name, address, birth_date, nif, nationality, shares value and shares in day can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI is already in use
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count != 0
	BEGIN
		RAISERROR ('The BI id is already in use!', 14, 1)
		RETURN
	END

	-- check if the NIF is already in use
	SELECT @count = count(nif) FROM football.person WHERE nif = @nif;

	IF @count != 0
	BEGIN
		RAISERROR ('The NIF id is already in use!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO football.person 
					([bi], 
					 [name], 
					 [address], 
					 [birth_date], 
					 [nif], 
					 [gender],
					 [nationality]) 
		VALUES      ( @bi, 
					  @name, 
					  @address, 
					  @birth_date, 
					  @nif, 
					  @gender,
					  @nationality) 

		INSERT INTO football.members 
					([bi], 
					 [shares_value], 
					 [shares_in_day]) 
		VALUES      ( @bi, 
					  @shares_value, 
					  @shares_in_day)
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the member!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

go

-- DROP PROC football.sp_modifyMember

CREATE PROCEDURE football.sp_modifyMember
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @shares_value		MONEY,
  @shares_in_day	INT
WITH ENCRYPTION
AS 
	IF @bi is null OR @name is null OR @address is null OR @birth_date is null OR 
		@gender is null OR @nationality is null OR @shares_value is null OR
		@shares_in_day is null
	BEGIN
		PRINT 'The bi, name, address, birth_date, nationality, shares value and shares in day can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI exists
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count = 0
	BEGIN
		RAISERROR ('The BI that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE  football.person SET
				name = @name, 
				address = @address, 
				birth_date = @birth_date,
				gender = @gender,
				nationality = @nationality
		WHERE bi = @bi;

		UPDATE football.members SET
			   shares_value = @shares_value, 
			   shares_in_day = @shares_in_day	   
		WHERE bi = @bi;

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the member!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

go

CREATE PROCEDURE football.sp_deleteMember
  @bi				INT
WITH ENCRYPTION
AS 
	IF @bi is null
	BEGIN
		PRINT 'The bi can not be null!'
		RETURN
	END
	
	BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM football.members WHERE bi = @bi;
		DELETE FROM football.person WHERE bi = @bi;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the member!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;
\end{lstlisting}

player.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createPlayer

CREATE PROCEDURE football.sp_createPlayer
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @nif				INT, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @salary			MONEY,
  @federation_id	INT,
  @weight			INT,
  @height			INT
WITH ENCRYPTION
AS 
	IF @bi is null OR @name is null OR @address is null OR @birth_date is null OR @nif is null OR 
		@gender is null OR @nationality is null OR @salary is null OR @federation_id is null OR
		@weight is null OR @height is null
	BEGIN
		PRINT 'The bi, name, address, birth_date, nif, nationality, salary, federation_id, weight and height can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI is already in use
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count != 0
	BEGIN
		RAISERROR ('The BI id is already in use!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use
	SELECT @count = count(federation_id) FROM football.player WHERE federation_id = @federation_id;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use
	SELECT @count = count(federation_id) FROM football.coach WHERE federation_id = @federation_id;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use by one coach!', 14, 1)
		RETURN
	END

	-- check if the NIF is already in use
	SELECT @count = count(nif) FROM football.person WHERE nif = @nif;

	IF @count != 0
	BEGIN
		RAISERROR ('The NIF id is already in use!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO football.person 
					([bi], 
					 [name], 
					 [address], 
					 [birth_date], 
					 [nif], 
					 [gender],
					 [nationality]) 
		VALUES      ( @bi, 
					  @name, 
					  @address, 
					  @birth_date, 
					  @nif, 
					  @gender,
					  @nationality) 

		INSERT INTO football.internal_people 
					([bi], 
					 [salary]) 
		VALUES      ( @bi, 
					  @salary) 

		INSERT INTO football.player 
					([bi], 
					 [federation_id], 
					 [weight],
					 [height]) 
		VALUES      ( @bi, 
					  @federation_id, 
					  @weight,
					  @height)
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the player!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

go 

-- DROP PROC football.sp_deletePlayer

CREATE PROCEDURE football.sp_deletePlayer
  @bi				INT
WITH ENCRYPTION
AS 
	IF @bi is null
	BEGIN
		PRINT 'The bi can not be null!'
		RETURN
	END
	
	BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM football.play WHERE bi = @bi;
		DELETE FROM football.player WHERE bi = @bi;
		DELETE FROM football.internal_people WHERE bi = @bi;
		DELETE FROM football.person WHERE bi = @bi;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the player!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;


go 

-- DROP PROC football.sp_modifyPlayer

CREATE PROCEDURE football.sp_modifyPlayer
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @salary			MONEY,
  @federation_id	INT,
  @weight			INT,
  @height			INT
WITH ENCRYPTION
AS 
	IF @bi is null OR @name is null OR @address is null OR @birth_date is null OR @gender is null
		OR @nationality is null OR @salary is null OR @federation_id is null OR @weight is null 
		OR @height is null
	BEGIN
		PRINT 'The bi, name, address, birth_date, nationality, salary, federation_id, weight and height can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI exists
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count = 0
	BEGIN
		RAISERROR ('The BI that you provided do not exists!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use
	SELECT @count = count(federation_id) FROM football.player WHERE federation_id = @federation_id AND bi != @bi;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use!', 14, 1)
		RETURN
	END

	-- check if the federation id is already in use
	SELECT @count = count(federation_id) FROM football.coach WHERE federation_id = @federation_id;

	IF @count != 0
	BEGIN
		RAISERROR ('The federation id is already in use by one coach!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE  football.person SET
				name = @name, 
				address = @address, 
				birth_date = @birth_date,
				gender = @gender,
				nationality = @nationality
		WHERE bi = @bi;

		UPDATE football.internal_people SET
			   salary = @salary
		WHERE bi = @bi;

		UPDATE football.player SET
			   federation_id = @federation_id, 
			   weight = @weight,
			   height = @height
		WHERE bi = @bi;

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the player!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

-- Player teams
go
-- DROP TYPE football.PlayerTeams;
CREATE TYPE football.PlayerTeams
AS TABLE
(
  team_name NVARCHAR(200),
  bi		INT
);

go

-- DROP PROC football.sp_sync_playerTeams

CREATE PROCEDURE football.sp_sync_playerTeams
  @playerTeams as football.PlayerTeams READONLY,
  @bi INT
WITH ENCRYPTION
AS 
BEGIN
	BEGIN TRANSACTION;

	BEGIN TRY
		-- clean player teams
		DELETE FROM football.play WHERE bi = @bi;

		-- insert into player teams
		INSERT football.play(team_name, bi)
		SELECT team_name, bi
		FROM @playerTeams
		
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the player teams!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;
END
\end{lstlisting}

practice.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createPractice

CREATE PROCEDURE football.sp_createPractice
	@id_court		INT,
	@date			DATE,
	@hour			TIME(7),
	@team_name		VARCHAR(50)
WITH ENCRYPTION
AS 
	IF @id_court is null OR @date is null OR @hour is null
		OR @team_name is null
	BEGIN
		PRINT 'The court id, date, hour or team name can not be null!'
		RETURN
	END
	
	
	DECLARE @count int

	-- check if the practice exists
	SELECT @count = count(id_court) FROM football.practice WHERE id_court = @id_court
																 AND date = @date
																 AND hour = @hour;

	IF @count != 0
	BEGIN
		RAISERROR ('The practice that you provided already exists!', 14, 1)
		RETURN
	END

	-- check if the team exists
	SELECT @count = count(name) FROM football.team WHERE name = @team_name;

	IF @count = 0
	BEGIN
		RAISERROR ('The team that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		INSERT INTO football.practice 
					([date],
					 [hour],
					 [id_court],
					 [team_name]) 
		VALUES      ( @date,
					  @hour,
					  @id_court,
					  @team_name)
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the practice!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_modifyPractice

CREATE PROCEDURE football.sp_modifyPractice
	@id_court		INT,
	@date			DATE,
	@hour			TIME(7),
	@team_name		VARCHAR(50)
WITH ENCRYPTION
AS 
	IF @id_court is null OR @date is null OR @hour is null
		OR @team_name is null
	BEGIN
		PRINT 'The court id, date, hour or team name can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the practice exists
	SELECT @count = count(id_court) FROM football.practice WHERE id_court = @id_court
																 AND date = @date
																 AND hour = @hour;

	IF @count = 0
	BEGIN
		RAISERROR ('The practice that you provided do not exists!', 14, 1)
		RETURN
	END
	
	-- check if the team exists
	SELECT @count = count(name) FROM football.team WHERE name = @team_name;

	IF @count = 0
	BEGIN
		RAISERROR ('The team that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		UPDATE  football.practice SET
				team_name = @team_name
		WHERE id_court = @id_court
			  AND date = @date
			  AND hour = @hour;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the practice!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_deletePractice

CREATE PROCEDURE football.sp_deletePractice
	@id_court		INT,
	@date			DATE,
	@hour			TIME(7)
WITH ENCRYPTION
AS 
	IF @id_court is null
	BEGIN
		PRINT 'The court id can not be null!'
		RETURN
	END
	
	IF @id_court is null OR @date is null OR @hour is null
	BEGIN
		PRINT 'The court id, date or hour can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the practice exists
	SELECT @count = count(id_court) FROM football.practice WHERE id_court = @id_court
																 AND date = @date
																 AND hour = @hour;

	IF @count = 0
	BEGIN
		RAISERROR ('The practice that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		DELETE FROM football.practice WHERE id_court = @id_court
											AND date = @date
											AND hour = @hour;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the practice!', 14, 1)
	END CATCH;
\end{lstlisting}

seats.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createSeat

CREATE PROCEDURE football.sp_createSeat
  @n_seat			INT, 
  @row  			VARCHAR(1), 
  @id_section       INT

WITH ENCRYPTION
AS 
	IF @n_seat is null OR @row is null OR @id_section is null
	BEGIN
		PRINT 'The n_seat, row and id_section can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the Annual seat is already in use
	SELECT @count = count(n_seat) FROM football.annual_seat WHERE n_seat = @n_seat AND row = @row AND id_section = @id_section;

	IF @count != 0
	BEGIN
		RAISERROR ('The seat already exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		INSERT INTO football.seat
					([n_seat], 
					 [row], 
					 [id_section]) 
		VALUES      ( @n_seat, 
					  @row, 
					  @id_section) 
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the seat!', 14, 1)
	END CATCH;


go 

-- DROP PROC football.sp_deleteSeat

CREATE PROCEDURE football.sp_deleteSeat
  @n_seat				INT,
  @row					VARCHAR(1),
  @id_section			INT
WITH ENCRYPTION
AS 
	IF @n_seat is null OR @id_section is null OR @row is null
	BEGIN
		PRINT 'The n_seat, id_section and row can not be null!'
		RETURN
	END

	DECLARE @count int

		-- check if the seat is Annual seat
	SELECT @count = count(n_seat) FROM football.annual_seat WHERE n_seat = @n_seat AND row = @row AND id_section = @id_section;

	IF @count != 0
	BEGIN
		RAISERROR ('The seat is Annual seat!', 14, 1)
		RETURN
	END

	-- check if the seat exists
	SELECT @count = count(n_seat) FROM football.seat WHERE n_seat = @n_seat AND row = @row AND id_section = @id_section;

	IF @count = 0
	BEGIN
		RAISERROR ('The seat doesnt exists!', 14, 1)
		RETURN
	END
	
	BEGIN TRY
		DELETE FROM football.seat WHERE n_seat = @n_seat AND id_section = @id_section AND row = @row;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the seat!', 14, 1)
	END CATCH;
\end{lstlisting}

section.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createSection

CREATE PROCEDURE football.sp_createSection
  @type				VARCHAR(75)
WITH ENCRYPTION
AS 
	IF @type is null
	BEGIN
		PRINT 'The type can not be null!'
		RETURN
	END

	BEGIN TRY
		INSERT INTO football.section 
					([type]) 
		VALUES      ( @type)
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the section!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_modifySection

CREATE PROCEDURE football.sp_modifySection
  @type  		VARCHAR(75),
  @id_section   INT
WITH ENCRYPTION
AS 
	IF @type is null
	BEGIN
		PRINT 'The type can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the section exists
	SELECT @count = count(id_section) FROM football.section WHERE id_section = @id_section;

	IF @count = 0
	BEGIN
		RAISERROR ('The section that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		UPDATE  football.section SET
				type = @type
		WHERE id_section = @id_section;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the section!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_deleteSection

CREATE PROCEDURE football.sp_deleteSection
  @id_section			INT
WITH ENCRYPTION
AS 
	IF @id_section is null
	BEGIN
		PRINT 'The section ID can not be null!'
		RETURN
	END

	DECLARE @count int

	-- check if the section exists
	SELECT @count = count(id_section) FROM football.section WHERE id_section = @id_section;

	IF @count = 0
	BEGIN
		RAISERROR ('The section that you provided do not exists!', 14, 1)
		RETURN
	END
	
	BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM football.annual_seat WHERE id_section = @id_section;
		DELETE FROM football.seat WHERE id_section = @id_section;
		DELETE FROM football.section WHERE id_section = @id_section;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the section!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;
\end{lstlisting}

staff.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createStaff

CREATE PROCEDURE football.sp_createStaff
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @nif				INT, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @salary			MONEY,
  @department_id    INT,
  @role	            VARCHAR(50)

WITH ENCRYPTION
AS 
	IF @bi is null OR @name is null OR @address is null OR @birth_date is null OR @nif is null OR 
		@gender is null OR @nationality is null OR @salary is null OR @department_id is null OR @role is null
	BEGIN
		PRINT 'The bi, name, address, birth_date, nif, nationality, salary, department id and role can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI is already in use
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count != 0
	BEGIN
		RAISERROR ('The BI id is already in use!', 14, 1)
		RETURN
	END

	-- check if the NIF is already in use
	SELECT @count = count(nif) FROM football.person WHERE nif = @nif;

	IF @count != 0
	BEGIN
		RAISERROR ('The NIF id is already in use!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		INSERT INTO football.person 
					([bi], 
					 [name], 
					 [address], 
					 [birth_date], 
					 [nif], 
					 [gender],
					 [nationality]) 
		VALUES      ( @bi, 
					  @name, 
					  @address, 
					  @birth_date, 
					  @nif, 
					  @gender,
					  @nationality) 

		INSERT INTO football.internal_people 
					([bi], 
					 [salary]) 
		VALUES      ( @bi, 
					  @salary) 

		INSERT INTO football.staff 
					([bi],
					 [department_id],
					 [role]) 
		VALUES      ( @bi, 
					  @department_id,
					  @role)
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the staff!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

	go 

-- DROP PROC football.sp_modifyStaff

CREATE PROCEDURE football.sp_modifyStaff
  @bi				INT, 
  @name				VARCHAR(75),
  @address			VARCHAR(75), 
  @birth_date		DATE, 
  @gender			VARCHAR(1), 
  @nationality		VARCHAR(75),
  @salary			MONEY,
  @department_id	INT,
  @role				VARCHAR(50)

WITH ENCRYPTION
AS 
	IF @bi is null OR @name is null OR @address is null OR @birth_date is null OR @gender is null
		OR @nationality is null OR @salary is null OR @department_id is null OR @role is null 

	BEGIN
		PRINT 'The bi, name, address, birth_date, nationality, salary, department_id and role can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the BI exists
	SELECT @count = count(bi) FROM football.person WHERE bi = @bi;

	IF @count = 0
	BEGIN
		RAISERROR ('The BI that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRANSACTION;

	BEGIN TRY
		UPDATE  football.person SET
				name = @name, 
				address = @address, 
				birth_date = @birth_date,
				gender = @gender,
				nationality = @nationality
		WHERE bi = @bi;

		UPDATE football.internal_people SET
			   salary = @salary
		WHERE bi = @bi;

		UPDATE football.staff SET
			   department_id = @department_id, 
			   role = @role
		WHERE bi = @bi;

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the staff!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;

	go 

-- DROP PROC football.sp_deleteStaff

CREATE PROCEDURE football.sp_deleteStaff
  @bi				INT
WITH ENCRYPTION
AS 
	IF @bi is null
	BEGIN
		PRINT 'The bi can not be null!'
		RETURN
	END
	
	BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM football.staff WHERE bi = @bi;
		DELETE FROM football.internal_people WHERE bi = @bi;
		DELETE FROM football.person WHERE bi = @bi;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the staff!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;
\end{lstlisting}

teams.sql
\begin{lstlisting} 
use p4g5;

go 

-- DROP PROC football.sp_createTeam

CREATE PROCEDURE football.sp_createTeam
  @name				VARCHAR(50),
  @max_age			INT
WITH ENCRYPTION
AS 
	IF @name is null OR @max_age is null
	BEGIN
		PRINT 'The name and max_age can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the name is already in use
	SELECT @count = count(name) FROM football.team WHERE name = @name;

	IF @count != 0
	BEGIN
		RAISERROR ('The name is already in use!', 14, 1)
		RETURN
	END

	BEGIN TRY
		INSERT INTO football.team 
					([name], 
					 [max_age]) 
		VALUES      ( @name, 
					  @max_age) 
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when creating the team!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_modifyTeam

CREATE PROCEDURE football.sp_modifyTeam
  @name				VARCHAR(50),
  @max_age			INT
WITH ENCRYPTION
AS 
	IF @name is null OR @max_age is null
	BEGIN
		PRINT 'The name and max_age can not be null!'
		RETURN
	END
	
	DECLARE @count int

	-- check if the team exists
	SELECT @count = count(name) FROM football.team WHERE name = @name;

	IF @count = 0
	BEGIN
		RAISERROR ('The team that you provided do not exists!', 14, 1)
		RETURN
	END

	BEGIN TRY
		UPDATE  football.team SET
				max_age = @max_age
		WHERE name = @name;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when updating the team!', 14, 1)
	END CATCH;

go 

-- DROP PROC football.sp_deleteTeam

CREATE PROCEDURE football.sp_deleteTeam
  @name			VARCHAR(50)
WITH ENCRYPTION
AS 
	IF @name is null
	BEGIN
		PRINT 'The name can not be null!'
		RETURN
	END
	
	BEGIN TRANSACTION;

	BEGIN TRY
		DELETE FROM football.heads WHERE team_name = @name;
		DELETE FROM football.play WHERE team_name = @name;
		DELETE FROM football.practice WHERE team_name = @name;
		DELETE FROM football.team WHERE name = @name;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		RAISERROR ('An error occurred when try delete the team!', 14, 1)
		ROLLBACK TRANSACTION;
	END CATCH;
\end{lstlisting}

